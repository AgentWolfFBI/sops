// IMPORTANT: This file contains the logic which drives the Flow Calculator. Do not edit this file. Additional data can be added to the flowData.js file.

import { flowData } from './flowData.js';
let aerodrome = null;

document.addEventListener('DOMContentLoaded', function() {  
    // Determine which aerodrome is selected
    for (const key in flowData) {
        if (window.location.pathname.includes(key)) {
            aerodrome = key;
            break;
        }
    }

    // Create form elements
    if (aerodrome !== null) {
        if(document.getElementById("flowCalculatorLandingTime") !== null) {
            CreateFormElements("flowCalculatorLandingTime");

            // Add event listeners
            const ffETAInput = document.getElementById("flowCalculatorLandingTimeFFETA");
            const runwaySelect = document.getElementById("flowCalculatorLandingTimeRunway");
            const arrivalSelect = document.getElementById("flowCalculatorLandingTimeArrival");
            const aircraftSelect = document.getElementById("flowCalculatorLandingTimeAircraft");
            const speedSelect = document.getElementById("flowCalculatorLandingTimeSpeed");

            ffETAInput.addEventListener("input", function() {
                CalculateLandingTime();
            });
            runwaySelect.addEventListener("change", function() {
                const selectedRunway = runwaySelect.value;
                arrivalSelect.innerHTML = GenerateArrivalOptions(selectedRunway, arrivalSelect.value);
                aircraftSelect.innerHTML = GenerateAircraftTypeOptions(selectedRunway, arrivalSelect.value, aircraftSelect.value);
                speedSelect.innerHTML = GenerateSpeedOptions(runwaySelect.value, arrivalSelect.value, speedSelect.value);
                CalculateLandingTime();
            });
            arrivalSelect.addEventListener("change", function() {
                aircraftSelect.innerHTML = GenerateAircraftTypeOptions(runwaySelect.value, arrivalSelect.value, aircraftSelect.value);
                speedSelect.innerHTML = GenerateSpeedOptions(runwaySelect.value, arrivalSelect.value, speedSelect.value);
                CalculateLandingTime();
            });
            aircraftSelect.addEventListener("change", function() {
                speedSelect.innerHTML = GenerateSpeedOptions(runwaySelect.value, arrivalSelect.value, speedSelect.value);
                CalculateLandingTime();
            });
            speedSelect.addEventListener("change", function() {
                CalculateLandingTime();
            });
        }
        if(document.getElementById("flowCalculatorFeederFixTime") !== null) {
            CreateFormElements("flowCalculatorFeederFixTime");

            // Add event listeners
            const landingTimeInput = document.getElementById("flowCalculatorFeederFixTimeLandingTime");
            const runwaySelect = document.getElementById("flowCalculatorFeederFixTimeRunway");
            const arrivalSelect = document.getElementById("flowCalculatorFeederFixTimeArrival");
            const aircraftSelect = document.getElementById("flowCalculatorFeederFixTimeAircraft");
            const speedSelect = document.getElementById("flowCalculatorFeederFixTimeSpeed");

            landingTimeInput.addEventListener("input", function() {
                CalculateFeederFixTime();
            });
            runwaySelect.addEventListener("change", function() {
                const selectedRunway = runwaySelect.value;
                arrivalSelect.innerHTML = GenerateArrivalOptions(selectedRunway, arrivalSelect.value);
                aircraftSelect.innerHTML = GenerateAircraftTypeOptions(selectedRunway, arrivalSelect.value, aircraftSelect.value);
                speedSelect.innerHTML = GenerateSpeedOptions(runwaySelect.value, arrivalSelect.value, speedSelect.value);
                CalculateFeederFixTime();
            });
            arrivalSelect.addEventListener("change", function() {
                aircraftSelect.innerHTML = GenerateAircraftTypeOptions(runwaySelect.value, arrivalSelect.value, aircraftSelect.value);
                speedSelect.innerHTML = GenerateSpeedOptions(runwaySelect.value, arrivalSelect.value, speedSelect.value);
                CalculateFeederFixTime();
            });
            aircraftSelect.addEventListener("change", function() {
                speedSelect.innerHTML = GenerateSpeedOptions(runwaySelect.value, arrivalSelect.value, speedSelect.value);
                CalculateFeederFixTime();
            });
            speedSelect.addEventListener("change", function() {
                CalculateFeederFixTime();
            });
        }
    }
});

function CreateFormElements(containerID) {
    let elementIDPrefix = "";
    let formContent = "";
    let resultsRow = "";

    const sortedRunways = Object.keys(flowData[aerodrome]).sort((a, b) => a.localeCompare(b));
    const prefillRunway = sortedRunways[0];
    const prefillArrival = RetrieveArrivals(prefillRunway)[0];

    const container = document.getElementById(containerID);

    try {
        // Initial inputs
        if(containerID == "flowCalculatorLandingTime") {
            elementIDPrefix = "flowCalculatorLandingTime";
            
            formContent = `<div class="row">
            <div class="form-group">
                <label>FF ETA:</label>
                <input id="${elementIDPrefix}FFETA" type="number" placeholder="FF ETA" min="0" max="59" step="1" placeholder="00" />
            </div>`;
            resultsRow = `<div class="row"><label style="font-size: 125%;">Landing Time: <span id="${elementIDPrefix}Result" style="color: var(--md-code-hl-string-color)"></span></label></div>`;
        } else if(containerID == "flowCalculatorFeederFixTime") {
            elementIDPrefix = "flowCalculatorFeederFixTime";
            
            formContent = `<div class="row">
            <div class="form-group">
                <label>Landing Time:</label>
                <input id="${elementIDPrefix}LandingTime" type="number" placeholder="Landing Time" min="0" max="59" step="1" placeholder="00" />
            </div>`;
            resultsRow = `<div class="row"><label style="font-size: 125%;">Feeder Fix Time: <span id="${elementIDPrefix}Result" style="color: var(--md-code-hl-string-color)"></span></label></div>`;
        }

        // Runways
        formContent += `
            <div class="form-group">
                <label>Runway:</label>
                <select id="${elementIDPrefix}Runway">`;

        for (let runway of sortedRunways) {
            formContent += `<option value="${runway}">${runway}</option>`;
        }

        // Arrivals
        formContent += `</select>
            </div>
            <div class="form-group">
                <label>Arrival:</label>
                <select id="${elementIDPrefix}Arrival">`;

        formContent += GenerateArrivalOptions(prefillRunway, null);
                   
        // Aircraft types
        formContent += `</select>
            </div>
            <div class="form-group">
                <label>Aircraft:</label>
                <select id="${elementIDPrefix}Aircraft">`;
                    
        formContent += GenerateAircraftTypeOptions(prefillRunway, prefillArrival, "Jet");

        // Speed options
        formContent += `</select>
            </div>
            <div class="form-group">
                <label>Speed:</label>
                <select id="${elementIDPrefix}Speed">`;
                    
        formContent += GenerateSpeedOptions(prefillRunway, prefillArrival, "Normal Speed");

        formContent += `</select>
            </div>
        </div>`;

        let form = document.createElement("form");
        form.classList.add("flowCalculator");
        form.setAttribute("autocomplete", "off");
        form.innerHTML = formContent + resultsRow;

        container.appendChild(form);
    } catch (error) {
        console.error("Error creating form elements:", error);
    }
}

function RetrieveArrivals(selectedRunway) {
    // Returns an array of arrivals for the selected runway, sorted alphabetically
    let arrivals = Object.keys(flowData[aerodrome][selectedRunway]);
    let sortedArrivals = arrivals.sort((a, b) => a.localeCompare(b));

    return sortedArrivals;
}

function GenerateArrivalOptions(selectedRunway, previousValue) {
    // Returns a string of HTML options for the arrivals select element
    let arrivalOptions = "";
    let selected = "";
    const sortedArrivals = RetrieveArrivals(selectedRunway);

    for (let arrival of sortedArrivals) {
        if(arrival === previousValue) {
            selected = "selected";
        } else {
            selected = "";
        }
        arrivalOptions += `<option value="${arrival}" ${selected}>${arrival}</option>`;
    }

    return arrivalOptions;
}

function RetrieveAircraftTypes(selectedRunway, selectedArrival) {
    // Returns an array of aircraft types for the selected runway and arrival, sorted alphabetically
    let aircraftTypes = Object.keys(flowData[aerodrome][selectedRunway][selectedArrival]["aircraft"]);
    let sortedAircraftTypes = aircraftTypes.sort((a, b) => a.localeCompare(b));

    return sortedAircraftTypes;
}

function GenerateAircraftTypeOptions(selectedRunway, selectedArrival, previousValue) {
    // Returns a string of HTML options for the aircraft select element
    let aircraftOptions = "";
    let selected = "";
    const sortedAircraft = RetrieveAircraftTypes(selectedRunway, selectedArrival);

    for (let aircraft of sortedAircraft) {
        if(aircraft === previousValue) {
            selected = "selected";
        } else {
            selected = "";
        }
        aircraftOptions += `<option value="${aircraft}" ${selected}>${aircraft}</option>`;
    }

    return aircraftOptions;
}

function RetrieveSpeeds(selectedRunway, selectedArrival) {
    // Returns an array of speeds for the selected runway and arrival
    let speedOptions = Object.keys(flowData[aerodrome][selectedRunway][selectedArrival]["corrections"]);
    speedOptions.push("Normal Speed");
    let sortedSpeedOptions = speedOptions.sort((a, b) => a.localeCompare(b));

    return sortedSpeedOptions;
}

function GenerateSpeedOptions(selectedRunway, selectedArrival, previousValue) {
    // Returns a string of HTML options for the speeds select element
    let speedOptions = "";
    let selected = "";
    const sortedSpeeds = RetrieveSpeeds(selectedRunway, selectedArrival);

    for (let speed of sortedSpeeds) {
        if(speed === previousValue) {
            selected = "selected";
        } else {
            selected = "";
        }
        speedOptions += `<option value="${speed}" ${selected}>${speed}</option>`;
    }

    return speedOptions;
}

function CalculateLandingTime() {
    // Calculates the landing time and updates the UI
    try {
        const ffETAInput = document.getElementById("flowCalculatorLandingTimeFFETA");
        const runwaySelect = document.getElementById("flowCalculatorLandingTimeRunway");
        const arrivalSelect = document.getElementById("flowCalculatorLandingTimeArrival");
        const aircraftSelect = document.getElementById("flowCalculatorLandingTimeAircraft");
        const speedSelect = document.getElementById("flowCalculatorLandingTimeSpeed");
        const resultSpan = document.getElementById("flowCalculatorLandingTimeResult");

        // Get values from inputs
        const ffETA = parseInt(ffETAInput.value, 10);
        const selectedRunway = runwaySelect.value;
        const selectedArrival = arrivalSelect.value;
        const selectedAircraft = aircraftSelect.value;
        const selectedSpeed = speedSelect.value;

        // Calculate landing time
        let landingTime = flowData[aerodrome][selectedRunway][selectedArrival]["aircraft"][selectedAircraft] + ffETA;
        if(selectedSpeed != "Normal Speed") {
            landingTime += flowData[aerodrome][selectedRunway][selectedArrival]["corrections"][selectedSpeed];
        }
        if(landingTime < 0) {
            landingTime += 60;
        } else if(landingTime > 59) {
            landingTime -= 60;
        }

        // Display result
        if(String(landingTime) === "NaN" || landingTime == undefined || landingTime == null) {
            resultSpan.textContent = "";
        } else {
            resultSpan.textContent = `${String(landingTime).padStart(2, '0')}`;
        }
    } catch (error) {
        console.error("Error calculating landing time:", error);
        document.getElementById('flowCalculatorLandingTimeResult').textContent = "Error";
    }
}

function CalculateFeederFixTime() {
    // Calculates the feeder fix time and updates the UI
    try {
        const landingTimeInput = document.getElementById("flowCalculatorFeederFixTimeLandingTime");
        const runwaySelect = document.getElementById("flowCalculatorFeederFixTimeRunway");
        const arrivalSelect = document.getElementById("flowCalculatorFeederFixTimeArrival");
        const aircraftSelect = document.getElementById("flowCalculatorFeederFixTimeAircraft");
        const speedSelect = document.getElementById("flowCalculatorFeederFixTimeSpeed");
        const resultSpan = document.getElementById("flowCalculatorFeederFixTimeResult");

        // Get values from inputs
        const landingTime = parseInt(landingTimeInput.value, 10);
        const selectedRunway = runwaySelect.value;
        const selectedArrival = arrivalSelect.value;
        const selectedAircraft = aircraftSelect.value;
        const selectedSpeed = speedSelect.value;

        // Calculate feeder fix time
        let feederFixTime = landingTime - flowData[aerodrome][selectedRunway][selectedArrival]["aircraft"][selectedAircraft];
        if(selectedSpeed != "Normal Speed") {
            feederFixTime -= flowData[aerodrome][selectedRunway][selectedArrival]["corrections"][selectedSpeed];
        }
        if(feederFixTime < 0) {
            feederFixTime += 60;
        } else if(feederFixTime > 59) {
            feederFixTime -= 60;
        }

        // Display result
        if(String(feederFixTime) === "NaN" || feederFixTime == undefined || feederFixTime == null) {
            resultSpan.textContent = "";
        } else {
            resultSpan.textContent = `${String(feederFixTime).padStart(2, '0')}`;
        }
    } catch (error) {
        console.error("Error calculating feeder fix time:", error);
        document.getElementById('flowCalculatorFeederFixTimeResult').textContent = "Error";
    }
}
